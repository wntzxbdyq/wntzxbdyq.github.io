<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始搭建个人网站（博客）</title>
      <link href="/2022/09/16/eggugh/"/>
      <url>/2022/09/16/eggugh/</url>
      
        <content type="html"><![CDATA[<h1 id="从零开始搭建个人网站（博客）"><a href="#从零开始搭建个人网站（博客）" class="headerlink" title="从零开始搭建个人网站（博客）"></a>从零开始搭建个人网站（博客）</h1><p>参考：<a href="https://zhuanlan.zhihu.com/p/113209647">https://zhuanlan.zhihu.com/p/113209647</a></p><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p>·Hexo</p><p>·静态博客</p><p>·无服务器</p><p>·GitHub Pages</p><p>·hexo-theme-butterfly</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><h4 id="什么是-Node-js"><a href="#什么是-Node-js" class="headerlink" title="什么是 Node.js?"></a>什么是 Node.js?</h4><p>首先说 JS，即 JavaScript。JavaScript 是一种编程语言，网页当中的交互和逻辑处理几乎都是由 JavaScript 完成。</p><p>Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | MDN</a></p><p><a href="https://baike.baidu.com/item/node.js/7567977">Node.js | 百度百科</a></p><h4 id="下载-Node-js"><a href="#下载-Node-js" class="headerlink" title="下载 Node.js"></a>下载 Node.js</h4><p><a href="https://nodejs.org/zh-cn/">下载 | Node.js</a></p><p>建议下载<strong>长期支持版，</strong>不要下载<strong>当前发布版</strong>（最新版容易有 bug）。</p><p>全部默认下一步进行安装。</p><p>Windows 打开命令提示符，macOS 打开终端，输入 node –version，如果得到的版本号与你方才安装的一致，那么 Node.js 就已经安装成功了。</p><h3 id="Git-与-Github"><a href="#Git-与-Github" class="headerlink" title="Git 与 Github"></a>Git 与 Github</h3><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><p>在此之前，建议先安装 VS Code。<a href="https://code.visualstudio.com/">下载 | VS Code</a></p><p>Visual Studio Code，简称 VS Code。 目前最为强大的编辑器，轻量且快速。（<del>宇宙第一编辑器</del>） 注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积也相比 VS Code 都要大上一个量级。</p><p>下载 Git 并安装。<a href="https://git-scm.com/">下载 | Git</a></p><p>如果国内速度太慢，可以试试<a href="https://pc.qq.com/detail/13/detail_22693.html">这里</a>。<br>Git 可以说是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。只需要把每次更改的状态告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。</p><h4 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h4><p>GitHub 是全世界最大的开源项目与代码托管平台，也是众多开发者的交流场所。<del>还是全球最大的同性交友网站</del>。 而代码托管本身用到的正是上文提到的 Git 技术。</p><p>注册 <a href="https://github.com/">GitHub</a> 账号。<br><strong>用户名不要随便取</strong>，因为它会出现在你的网址中。</p><p>选择免费使用即可。</p><p>登录 GitHub。<br>为什么要用 GitHub？</p><p>GitHub 提供了 <a href="https://pages.github.com/">GitHub Pages</a> 这一服务。 用户们可以利用这一服务，部署自己的静态站点。</p><p>免费的哦</p><p>点击右上角的+-&gt;New repository 新建仓库。</p><p>仓库名称必须为用户名.github.io , 用户名取英文，建议统一小写。（大小写无所谓，但来回切换挺麻烦的）</p><p>默认 public。</p><p>点击 Create repository。</p><p>点击 Settings-&gt;Pages，可以看到一个链接，那就是你的网站地址啦。<br>建议创建仓库的时候点一个 README，因为有可能看不到网站的链接。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p><a href="https://hexo.io/zh-cn/">下载 | Hexo</a></p><p>可以参考<a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>。<br><strong>为嘛使用 Hexo ？</strong> Hexo 是一个快速、简洁而强大的博客框架，基于 Node.js，同样托管于 GitHub 之上。生态中拥有众多插件主题。你可以基于它快速生成一些静态页面。 你可以使用别人的各种主题与插件，也可以自己定制开发想要的功能。 其他常用的博客框架还有 <a href="https://wordpress.org/">WordPress</a>，<a href="http://typecho.org/">Typecho</a>等，但这些往往都需要购置自己的服务器，而无法静态化地部署到 GitHub Pages 上。（当然，相应的功能和灵活性也大大提升。） 静态网站生成器还有 <a href="https://vuepress.vuejs.org/">Vuepress</a>，<a href="https://www.gatsbyjs.com/">Gatsby</a>等。但这些多是为了写文档而量身定制的，你也可以使用它们，但是相较 Hexo 的博客定位，它们关于博客的插件和主题以及解决办法会少得多。 <a href="https://gohugo.io/">Hugo</a> 提供的功能与 Hexo 几乎相同，不过它是基于 GO 语言。日后你想对自己的网站进行自定义，即便是 Hugo，你编写前端的交互仍旧需要使用 JavaScript，所以选择基于 JavaScript 的 Hexo 可以降低学习成本。（你若对 GO 有兴趣，仍然可以尝试使用 Hugo，但本教程将不会针对 Hugo 进行展开。） 所以对于新手来说，使用 Hexo 作为起始点，不失为一个好选择。（当然如果你有钱租服务器，就可以考虑考虑 WordPress）</p><p>在终端中输入以下命令：</p><p>npm install hexo-cli -g</p><p>如果安装失败，可能是没有权限，可以尝试</p><p>sudo npm install hexo-cli -g<br>npm 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。 install 自然是安装。 hexo-cli 则是 hexo 的终端工具，可以帮助你生成一些模版文件，之后再用到。 -g 代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p><p>先通过 cd 进入你打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here）</p><p>接下来输入：</p><p>hexo init 用户名.github.io<br>hexo 正是因为我们之前安装了 hexo-cli 这一个包，所以我们可以在终端中使用 hexo 这一命令。 init 初始化博客的模版文件。后面跟的是你要新建的文件夹，最好和你此前新建的仓库名一致。</p><p>进入你的博客文件夹</p><p>cd 用户名.github.io</p><p>默认安装所有’package.json’文件中提到的包</p><p>npm install</p><p>预览网页</p><p>hexo server (也可以缩写成 hexo s)</p><p>server 代表开启本地的 Hexo 服务器，这时可以打开浏览器，在地址栏中输入 localhost:4000，就可以看到本地的网页了。</p><p>按 Ctrl + C 结束运行。</p><p>至此，基础的模板页面便已经搭建好了。</p><h4 id="使用-Hexo-主题"><a href="#使用-Hexo-主题" class="headerlink" title="使用 Hexo 主题"></a>使用 Hexo 主题</h4><p>Hexo 默认提供的是<a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a>主题。默认主题样式简单，功能较少，所以大多数人并不会使用默认主题。</p><p>可以在<a href="https://hexo.io/themes/">Themes | Hexo</a> 发现更多好看的主题，使用方法大同小异。</p><p>当你具备一定的开发能力后，你也可以开发属于自己的主题。</p><p>这里以 <strong>Butterfly</strong> 为例。</p><h4 id="下载-Hexo-主题"><a href="#下载-Hexo-主题" class="headerlink" title="下载 Hexo 主题"></a>下载 Hexo 主题</h4><p>进入终端，确保路径处于你此前使用 Hexo 初始化好的文件夹目录下，输入以下命令。</p><p>git clone -b master <a href="https://gitee.com/immyw/hexo-theme-butterfly.git">https://gitee.com/immyw/hexo-theme-butterfly.git</a> themes&#x2F;butterfly</p><h4 id="编辑-Hexo-配置"><a href="#编辑-Hexo-配置" class="headerlink" title="编辑 Hexo 配置"></a>编辑 Hexo 配置</h4><p>右键文件夹使用 VS Code 打开。</p><p>在你通过 Hexo 初始化生成的文件目录下，会存在一个_config.yml 文件。</p><p>它是 Hexo 的配置文件，关于各配置选项的意义你可以查看<a href="https://hexo.io/zh-cn/docs/configuration">配置 | Hexo</a>。</p><p>在_config.yml 中找到 theme，将其后的 landscape 修改为 butterfly。<br>注意 yml 文件格式，<strong>空格</strong>不可删除。</p><p>由于主题使用了 pug 和 stylus，而 Hexo 自带的一般是 ejs 与 stylus ，所以还需要安装渲染器。<br>pug 是一种模板引擎，可以渲染为 HTML 字符串。类似的还有 ejs，swig 等，语法和设计理念有所不同。 stylus 是一种 CSS 预处理器，可以渲染为 CSS。类似的还有 scss，less，同样只是语法和设计理念有所差异。</p><p>命令如下：</p><p>npm install hexo-render-pug hexo-renderer-stylus</p><p>这时再像之前那般使用 hexo server 重新启动服务器，你就可以看到一个不一样的主题风格的页面。</p><h3 id="自定义主题配置"><a href="#自定义主题配置" class="headerlink" title="自定义主题配置"></a>自定义主题配置</h3><p>直接放上<a href="https://butterfly.js.org/posts/4aa8abbe/">官方文档</a>。（右下角可以简繁切换）</p><p>再放上两个好用的工具。</p><p><a href="https://smms.app/">SM.MS</a> 可以把本地图片转换成链接，配置网站的主页背景、头像、文章封面之类的会有用。</p><p><a href="http://www.fontawesome.com.cn/faicons/">Font Awesome</a> 图标库，可以查图标名。</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>此时的网站还只能在本地查看，如果想要放到线上与小伙伴们分享，那么就需要用到 GitHub Pages ，不过 GitHub Pages 只支持纯静态文件。</p><p>如果进行多次生成，可能会因为缓存发生错误，可以先清除一遍</p><p>hexo clean</p><p>生成站点的静态文件</p><p>hexo generate (缩写 hexo g)</p><h3 id="与远程仓库建立关联"><a href="#与远程仓库建立关联" class="headerlink" title="与远程仓库建立关联"></a>与远程仓库建立关联</h3><p>初始化 Git 仓库，只需执行一次</p><p>git init</p><p><a href="https://blog.csdn.net/qq_36342182/article/details/108668395?app_version=5.7.3&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22108668395%22,%22source%22:%22Indulgeinbeauty%22%7D&utm_source=app">踩坑指南（一）</a></p><p>在将其部署到 GitHub Pages 上之前，我们最好先建立一个分支。<br>什么是分支？ Git 提供了版本管理功能，其中还有一个分支功能，可以简单地将其理解为平行世界。</p><p>用户名.github,io 部署后，GitHub Pages 将默认使用你的 master 分支作为静态文件部署。 所以我们最好新建一个 hexo 分支（命名无所谓）用来存储 Hexo 地源代码，master 分支则用来存储部署后的静态文件。</p><p>git checkout -b hexo</p><p>这时便成功建立了一个 hexo 分支，以后的工作都将在 hexo 分支下进行。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>为了更方便的部署到 GitHub Pages ，Hexo 提供了 hexo-deployer-git 插件。</p><p>安装插件</p><p>npm install hexo-deployer-git</p><p>在_config.yml 中配置。</p><p>deploy:<br>type: git<br>repo: 你此前新建的仓库的链接 # 比如：<a href="https://github.com/wntzxbdyq/wntzxbdyq.github.io">https://github.com/wntzxbdyq/wntzxbdyq.github.io</a><br>branch: master # 默认使用 master 分支<br>message: Update Hexo Static Content # 你可以自定义此次部署更新的说明</p><p>保存，部署。（第一次需要输入用户名和密码）<br>hexo deploy(也可缩写成hexo d)</p><p><a href="https://blog.csdn.net/LuM523/article/details/103228298?app_version=5.7.3&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22103228298%22,%22source%22:%22Indulgeinbeauty%22%7D&utm_source=app">踩坑指南（二）</a></p><p><strong>注意！！</strong></p><p>使用 hexo d 部署成功后，在本地使用 hexo s 预览也没有问题，但是点击网站链接内容却没有更新，并且排除<strong>时间延迟</strong>的可能。</p><p>此时问题其实出在<strong>分支</strong>上，GitHub 仓库的默认分支是 main，但是配置_config.yml 文件时，分支选择的是 master。</p><p><strong>也就是说，Pages 服务使用的是我的 main 分支生成的页面，而我需要生成页面的代码是在 master 分支里的。</strong></p><p>所以需要在 Settings-&gt;Pages 里面修改分支。<a href="https://blog.csdn.net/Lu_xiuyuan/article/details/112056997?app_version=5.7.3&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22112056997%22,%22source%22:%22Indulgeinbeauty%22%7D&utm_source=app">参考</a></p><p>等待完成后，打开网址 <a href="https://用户名.github.io/">https:&#x2F;&#x2F;用户名.github.io</a>就能看到你的线上网站了。</p><h3 id="与语雀联动"><a href="#与语雀联动" class="headerlink" title="与语雀联动"></a>与语雀联动</h3><p>嗨害嗨！<br>语雀跟 hexo 其实还可以联动！<br>我也是看的别人的分享。<br><a href="https://mp.weixin.qq.com/s?__biz=MzU5OTU3NDEzOQ==%E2%88%A3=2247486590&idx=1&sn=bcb5652741e69eb124cbcd909d2a6c38&chksm=feb39f6ac9c4167c7e4a0957d8b23fa4994aa432a1c9b50ebca581b1df602de4973a63c5e054&cur_album_id=1431854293866643456&scene=189#wechat_redirect">教程 1</a><br><a href="https://blog.csdn.net/qq_33625877/article/details/114097105?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-114097105-blog-123749206.topnsimilarv1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-114097105-blog-123749206.topnsimilarv1&utm_relevant_index=5">教程 2</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
